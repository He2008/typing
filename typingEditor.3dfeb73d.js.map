{"version":3,"sources":["typingEditor/config.ts","typingEditor/utils.ts","typingEditor/view.ts","typingEditor/index.ts"],"names":[],"mappings":"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","file":"typingEditor.3dfeb73d.js","sourceRoot":"../src","sourcesContent":["const java = \n`\npublic class StringCompareEmp{\n    public static void main(String args[]){\n       String str = \"Hello World\";\n       String anotherString = \"hello world\";\n       Object objStr = str;\n  \n       System.out.println( str.compareTo(anotherString) );\n       System.out.println( str.compareToIgnoreCase(anotherString) );\n       System.out.println( str.compareTo(objStr.toString()));\n    }\n }\n`\nconst js = \n`\ndocument.ready = function (callback) {\n    if (document.addEventListener) {\n        document.addEventListener('DOMContentLoaded', function () {\n            document.removeEventListener('DOMContentLoaded', arguments.callee, false);\n            callback();\n        }, false)\n    }\n    else if (document.attachEvent) {\n        document.attachEvent('onreadystatechange', function () {\n              if (document.readyState == \"complete\") {\n                        document.detachEvent(\"onreadystatechange\", arguments.callee);\n                        callback();\n               }\n        })\n    }\n    else if (document.lastChild == document.body) {\n        callback();\n    }\n}\n`\n\n\nexport default{\ncontent:js,\njava,\njs\n\n}\n","const utils = {\n   hasClass,\n   addClass,\n   remove\n}\n\n/**\n *@desc 判断是否有某个Class \n *@param {HTMLElement} el 元素\n *@param {string} className 类名\n *@return {boolean} \n */\nfunction hasClass(el:HTMLElement,className:string):boolean{\n    return (new RegExp('(\\\\s|^)' + className + '(\\\\s|$)')).test(el.className);\n}\n/**\n * @desc 添加Class\n * @param el 元素\n * @param className 类名 \n */\nfunction addClass(el:HTMLElement,className:string){\n    if(hasClass(el,className))return false;\n    el.className += ' ' + className;\n}\n\nfunction remove(el:HTMLElement,className:string){\n    if(hasClass(el,className)){\n        let reg = new RegExp('(\\\\s|^)' + className + '(\\\\s|$)');\n        el.className = el.className.replace(reg, ' ');\n    }\n}\nexport default utils\nwindow.utils = utils","\nimport Utils from './utils'\nexport class CharBlock {\n    char: string;\n    type: CharBlockType;\n    isActive: boolean = false;\n    html: HTMLElement;\n    constructor(char: string, type: CharBlockType = \"default\") {\n      this.char = char;\n      this.type = type;\n      this.html = document.createElement(\"span\");\n      this.initCharHtml();\n      this.changeType(type);\n    }\n    initCharHtml() {\n      let char = this.char;\n      this.html.innerHTML = char;\n    }\n    changeType(type: CharBlockType) {\n        if(this.type === 'end') return\n      this.html.className = `char ${type} ${this.isActive ? \"isActive\" : \"\"}`;\n    }\n    toggleActive(isActive: boolean) {\n      this.isActive = isActive;\n      if (this.isActive) {\n        Utils.addClass(this.html, \"isActive\");\n      } else {\n        Utils.remove(this.html, \"isActive\");\n      }\n    }\n  }\n  \n  export  class Line {\n    html: HTMLElement;\n    lineNo: number;\n    charList: CharBlock[] = [];\n    constructor(lineText: string[], type) {\n      this.initLine(lineText, type);\n    }\n    initLine(text: string[], type: String) {\n      this.html = document.createElement(\"p\");\n      Utils.addClass(this.html, \"line\");\n      text.forEach(char => {\n        let blockType: CharBlockType =\n          type === \"input\" ? \"transparent\" : \"default\";\n        if (char === \"indent\") {\n          blockType = \"indent\";\n          char = \"&nbsp\";\n        }else if(char ==='end'){\n          blockType = \"end\";\n          char = \"&nbsp\";\n        }\n        let charBlock = new CharBlock(char, blockType);\n        this.charList.push(charBlock);\n        this.html.append(charBlock.html);\n      });\n    }\n  }\n  \n  export   class View {\n    html: HTMLElement;\n    text: string;\n    lineList: Line[] = [];\n  \n    constructor(text: string, type: string) {\n      this.text = text;\n      this.html = document.createElement(\"div\");\n      Utils.addClass(this.html, type);\n      this.handleText(type);\n    }\n    handleText(type) {\n      let text = this.text;\n      let line = [];\n      let char: string;\n      let indent = true;\n      for (let i = 0; i < text.length; i++) {\n        char = text[i];\n        if (!char || char === \" \") {\n          char = indent ? \"indent\" : \"&nbsp;\";\n        } else if (char === \"\\r\\n\" || char === \"\\n\") {\n          let lineClass = new Line(line, type);\n          this.lineList.push(lineClass);\n          this.html.append(lineClass.html);\n          line = [];\n          indent = true;\n          continue;\n        } else {\n          indent = false;\n        }\n        line.push(char);\n      }\n      line.push('end')\n      let lineClass = new Line(line, type);\n      this.lineList.push(lineClass);\n      this.html.append(lineClass.html);\n    }\n  }\n  ","import C from \"./config\";\nimport Utils from \"./utils\";\nimport {View} from './view'\n\n/**\n * @desc Typing 类\n * @\n */\nclass Typing {\n  el: HTMLElement;\n  displayView: View;\n  inputView: View;\n  index: number[] = [0, 0];\n  /**\n   * 创建Typing实例\n   * @param config.text 文章内容\n   * @param config.el 挂载的htmlElement \n   */\n  constructor(config: TypingConfig) {\n    this.el = config.el;\n    Utils.addClass(this.el, \"screen-warp\");\n    this.displayView = new View(config.text, \"display\");\n    this.inputView = new View(config.text, \"input\");\n    this.el.append(this.displayView.html, this.inputView.html);\n    this.handleKeyEvent();\n  }\n\n  /**\n   * 监听键盘输入\n   */\n  handleKeyEvent() {\n    window.onkeydown = (event: any) => {\n      let code: Number = event.keyCode;\n      let key = event.key;\n      let lineIndex = () => this.index[1];\n      let charIndex = () => this.index[0];\n      let inputBlock = () =>\n        this.inputView.lineList[lineIndex()].charList[charIndex()];\n      let displayBlock = () =>\n        this.displayView.lineList[lineIndex()].charList[charIndex()];\n      // input text\n      if (\n        (code > 47 && code < 59) ||\n        (code > 64 && code < 91) ||\n        (code > 185 && code < 223) ||\n        code === 32\n      ) {\n        let type: wordBlockType = \"correct\";\n        if (key === \" \") key = \"&nbsp;\";\n        if (key !== displayBlock().char) type = \"error\";\n        displayBlock().changeType(\"transparent\");\n        inputBlock().changeType(type);\n        this.moveIndex(\"forward\");\n      }\n      // ENTER\n      if (code === 13) {\n        console.log(\"enter\");\n      }\n      // back\n      if (code === 8) {\n        console.log(this.inputView);\n        console.log(\"back\", this.index);\n        this.moveIndex(\"back\");\n        displayBlock().changeType(\"default\");\n        inputBlock().changeType(\"transparent\");\n      }\n    };\n  }\n  /**\n   * 移动光标\n   * @param type 移动方向\n   */\n  moveIndex(type: string) {\n    let lineIndex = this.index[1];\n    let charIndex = this.index[0];\n    let line = () => {\n      return this.displayView.lineList[this.index[1]];\n    };\n    let char = () => {\n      return line().charList[this.index[0]];\n    };\n    char().toggleActive(false);\n\n    if (type === \"forward\") {\n        if(checkEnd(this.displayView)) return;\n      if (charIndex >= line().charList.length - 1) {\n        this.index[0] = 0;\n        this.index[1]++;\n      } else {\n        this.index[0]++;\n      }\n    } else if (type === \"back\") {\n        if(checkStart(this.displayView)) return;\n      if (charIndex > 0 && char().type !== \"indent\") {\n        this.index[0]--;\n      } else {\n        this.index[1]--;\n        this.index[0] = line().charList.length - 1;\n      }\n    }\n    char().toggleActive(true);\n    if (char().type === \"indent\") this.moveIndex(type);\n\n    function checkEnd(view: View) {\n      return (\n        lineIndex === view.lineList.length - 1 &&\n        line().charList.length - 1 === charIndex\n      );\n    }\n    function checkStart(view: View) {\n      return lineIndex === 0 && charIndex === 0;\n    }\n  }\n}\n\n// 主函数\nfunction __main__() {\n  let config: TypingConfig = {\n    el: document.getElementById(\"typing\"),\n    text: C.content.trim()\n  };\n  let typing = new Typing(config);\n}\n\nwindow.onload = function() {\n  console.log(\"load\");\n  __main__();\n};\n"]}